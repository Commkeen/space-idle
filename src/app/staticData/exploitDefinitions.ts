import { ResourceCollection } from '../models/resource';
import { Effect, BaseProductionEffect } from './effectDefinitions';

export class ExploitDefinition {
  public cost: ResourceCollection = new ResourceCollection();
  public effects: Effect[] = [];
  constructor (
    public name: string,
    public description: string
  ) {}

  public addCost(resource: string, amount: number): ExploitDefinition {
    this.cost.add(resource, amount);
    return this;
  }

  public addEffect(bonusEffect: Effect): ExploitDefinition {
    this.effects.push(bonusEffect);
    return this;
  }

  public addProduction(resource: string, amount: number): ExploitDefinition {
    const bonusEffect = new BaseProductionEffect(resource, amount);
    this.effects.push(bonusEffect);
    return this;
  }
}

export const EXPLOIT_LIBRARY: ExploitDefinition[] = [
  new ExploitDefinition('iron mineshaft', 'some more metal for you').addCost('duranium', 5).addCost('metal', 20)
                                                                    .addProduction('metal', 0.4),
  new ExploitDefinition('copper mineshaft', 'a bit of metal for you').addCost('metal', 50).addProduction('metal', 0.2),
  new ExploitDefinition('methane extractor', 'collects methane').addCost('duranium', 30),
  new ExploitDefinition('energy recombiner', 'generates power').addCost('nanofiber', 10),
  new ExploitDefinition('mineshaft', 'produces metal').addCost('duranium', 5),
  new ExploitDefinition('extractor', 'produces gases').addCost('duranium', 6),
  new ExploitDefinition('crawler', 'produces glittersand').addCost('nanofiber', 10),
  new ExploitDefinition('charybdin drill', 'produces charybdin').addCost('duranium', 50),
  new ExploitDefinition('synaptite scoop', 'produces synaptite').addCost('duranium', 500)
];
